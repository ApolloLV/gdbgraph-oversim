//
// Generated file, do not edit! Created by opp_msgc 4.2 from overlay/SelfStabilizingGeneralDeBruijnGraph/GeneralDeBruijnMessage.msg.
//

#ifndef _GENERALDEBRUIJNMESSAGE_M_H_
#define _GENERALDEBRUIJNMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <CommonMessages_m.h>
#include <stdlib.h>
#include <DeBruijnNodeHandle.h>
#include <cmath>
// }}



/**
 * Class generated from <tt>overlay/SelfStabilizingGeneralDeBruijnGraph/GeneralDeBruijnMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet GeneralDeBruijnMessage extends BaseOverlayMessage {
 *     int command;
 *     DeBruijnNodeHandle t;
 *     double r;
 *     int remHops;
 *     DeBruijnNodeHandle u;
 *     DeBruijnNodeHandle qtilde;
 *     DeBruijnNodeHandle sender;
 *     DeBruijnNodeHandle result;
 *     string mode;
 *     int i;
 *     int j;
 *     bool dB;
 * }
 * </pre>
 */
class GeneralDeBruijnMessage : public ::BaseOverlayMessage
{
  protected:
    int command_var;
    DeBruijnNodeHandle t_var;
    double r_var;
    int remHops_var;
    DeBruijnNodeHandle u_var;
    DeBruijnNodeHandle qtilde_var;
    DeBruijnNodeHandle sender_var;
    DeBruijnNodeHandle result_var;
    opp_string mode_var;
    int i_var;
    int j_var;
    bool dB_var;

  private:
    void copy(const GeneralDeBruijnMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GeneralDeBruijnMessage&);

  public:
    GeneralDeBruijnMessage(const char *name=NULL, int kind=0);
    GeneralDeBruijnMessage(const GeneralDeBruijnMessage& other);
    virtual ~GeneralDeBruijnMessage();
    GeneralDeBruijnMessage& operator=(const GeneralDeBruijnMessage& other);
    virtual GeneralDeBruijnMessage *dup() const {return new GeneralDeBruijnMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCommand() const;
    virtual void setCommand(int command);
    virtual DeBruijnNodeHandle& getT();
    virtual const DeBruijnNodeHandle& getT() const {return const_cast<GeneralDeBruijnMessage*>(this)->getT();}
    virtual void setT(const DeBruijnNodeHandle& t);
    virtual double getR() const;
    virtual void setR(double r);
    virtual int getRemHops() const;
    virtual void setRemHops(int remHops);
    virtual DeBruijnNodeHandle& getU();
    virtual const DeBruijnNodeHandle& getU() const {return const_cast<GeneralDeBruijnMessage*>(this)->getU();}
    virtual void setU(const DeBruijnNodeHandle& u);
    virtual DeBruijnNodeHandle& getQtilde();
    virtual const DeBruijnNodeHandle& getQtilde() const {return const_cast<GeneralDeBruijnMessage*>(this)->getQtilde();}
    virtual void setQtilde(const DeBruijnNodeHandle& qtilde);
    virtual DeBruijnNodeHandle& getSender();
    virtual const DeBruijnNodeHandle& getSender() const {return const_cast<GeneralDeBruijnMessage*>(this)->getSender();}
    virtual void setSender(const DeBruijnNodeHandle& sender);
    virtual DeBruijnNodeHandle& getResult();
    virtual const DeBruijnNodeHandle& getResult() const {return const_cast<GeneralDeBruijnMessage*>(this)->getResult();}
    virtual void setResult(const DeBruijnNodeHandle& result);
    virtual const char * getMode() const;
    virtual void setMode(const char * mode);
    virtual int getI() const;
    virtual void setI(int i);
    virtual int getJ() const;
    virtual void setJ(int j);
    virtual bool getDB() const;
    virtual void setDB(bool dB);
};

inline void doPacking(cCommBuffer *b, GeneralDeBruijnMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GeneralDeBruijnMessage& obj) {obj.parsimUnpack(b);}


#endif // _GENERALDEBRUIJNMESSAGE_M_H_
